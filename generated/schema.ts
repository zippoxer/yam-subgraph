// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Rebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Rebase entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Rebase entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Rebase", id.toString(), this);
  }

  static load(id: string): Rebase | null {
    return store.get("Rebase", id) as Rebase | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevYamsScalingFactor(): BigInt {
    let value = this.get("prevYamsScalingFactor");
    return value.toBigInt();
  }

  set prevYamsScalingFactor(value: BigInt) {
    this.set("prevYamsScalingFactor", Value.fromBigInt(value));
  }

  get newYamsScalingFactor(): BigInt {
    let value = this.get("newYamsScalingFactor");
    return value.toBigInt();
  }

  set newYamsScalingFactor(value: BigInt) {
    this.set("newYamsScalingFactor", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardRate(): BigInt {
    let value = this.get("rewardRate");
    return value.toBigInt();
  }

  set rewardRate(value: BigInt) {
    this.set("rewardRate", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get periodFinish(): BigInt {
    let value = this.get("periodFinish");
    return value.toBigInt();
  }

  set periodFinish(value: BigInt) {
    this.set("periodFinish", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get rewardAllocated(): BigInt {
    let value = this.get("rewardAllocated");
    return value.toBigInt();
  }

  set rewardAllocated(value: BigInt) {
    this.set("rewardAllocated", Value.fromBigInt(value));
  }

  get rewardPaid(): BigInt {
    let value = this.get("rewardPaid");
    return value.toBigInt();
  }

  set rewardPaid(value: BigInt) {
    this.set("rewardPaid", Value.fromBigInt(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolHourData", id.toString(), this);
  }

  static load(id: string): PoolHourData | null {
    return store.get("PoolHourData", id) as PoolHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get hourlyDepositVolume(): BigInt {
    let value = this.get("hourlyDepositVolume");
    return value.toBigInt();
  }

  set hourlyDepositVolume(value: BigInt) {
    this.set("hourlyDepositVolume", Value.fromBigInt(value));
  }

  get hourlyWithdrawalVolume(): BigInt {
    let value = this.get("hourlyWithdrawalVolume");
    return value.toBigInt();
  }

  set hourlyWithdrawalVolume(value: BigInt) {
    this.set("hourlyWithdrawalVolume", Value.fromBigInt(value));
  }

  get ticks(): Array<BigInt> {
    let value = this.get("ticks");
    return value.toBigIntArray();
  }

  set ticks(value: Array<BigInt>) {
    this.set("ticks", Value.fromBigIntArray(value));
  }
}
